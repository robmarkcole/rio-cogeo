{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rio-cogeo \u00b6 Cloud Optimized GeoTIFF (COG) creation and validation plugin for Rasterio. Documentation : cogeotiff.github.io/rio-cogeo/ Source Code : cogeotiff/rio-cogeo Cloud Optimized GeoTIFF \u00b6 This plugin aims to facilitate the creation and validation of Cloud Optimized GeoTIFF (COG or COGEO). While it respects the COG specifications , this plugin also enforces several features: Internal overviews (User can remove overview with option --overview-level 0 ) Internal tiles (default profiles have 512x512 internal tiles) Important : Starting from GDAL 3.1 a new COG generator driver will be added ( doc , discussion ) and will make rio-cogeo kinda obsolete. Install \u00b6 $ pip install -U pip $ pip install rio-cogeo Or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-cogeo.git GDAL Version \u00b6 It is recommanded to use GDAL > 2.3.2. Previous versions might not be able to create proper COGs (ref: OSGeo/gdal#754 ). More info in cogeotiff/rio-cogeo#55 More \u00b6 Blog post on good and bad COG formats: medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f Checkout rio-glui or rio-viz rasterio plugins to explore COG locally in your web browser. Contribution & Development \u00b6 See CONTRIBUTING.md Changes \u00b6 See CHANGES.md . License \u00b6 See LICENSE","title":"Home"},{"location":"#rio-cogeo","text":"Cloud Optimized GeoTIFF (COG) creation and validation plugin for Rasterio. Documentation : cogeotiff.github.io/rio-cogeo/ Source Code : cogeotiff/rio-cogeo","title":"rio-cogeo"},{"location":"#cloud-optimized-geotiff","text":"This plugin aims to facilitate the creation and validation of Cloud Optimized GeoTIFF (COG or COGEO). While it respects the COG specifications , this plugin also enforces several features: Internal overviews (User can remove overview with option --overview-level 0 ) Internal tiles (default profiles have 512x512 internal tiles) Important : Starting from GDAL 3.1 a new COG generator driver will be added ( doc , discussion ) and will make rio-cogeo kinda obsolete.","title":"Cloud Optimized GeoTIFF"},{"location":"#install","text":"$ pip install -U pip $ pip install rio-cogeo Or install from source: $ pip install -U pip $ pip install git+https://github.com/cogeotiff/rio-cogeo.git","title":"Install"},{"location":"#gdal-version","text":"It is recommanded to use GDAL > 2.3.2. Previous versions might not be able to create proper COGs (ref: OSGeo/gdal#754 ). More info in cogeotiff/rio-cogeo#55","title":"GDAL Version"},{"location":"#more","text":"Blog post on good and bad COG formats: medium.com/@_VincentS_/do-you-really-want-people-using-your-data-ec94cd94dc3f Checkout rio-glui or rio-viz rasterio plugins to explore COG locally in your web browser.","title":"More"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#license","text":"See LICENSE","title":"License"},{"location":"API/","text":"rio-cogeo can also be integrated directly in your custom script. See rio_cogeo.cogeo.cog_translate function. e.g: from rio_cogeo.cogeo import cog_translate def _translate ( src_path , dst_path , profile = \"webp\" , profile_options = {}, ** options ): \"\"\"Convert image to COG.\"\"\" # Format creation option (see gdalwarp `-co` option) output_profile = cog_profiles . get ( profile ) output_profile . update ( dict ( BIGTIFF = \"IF_SAFER\" )) output_profile . update ( profile_options ) # Dataset Open option (see gdalwarp `-oo` option) config = dict ( GDAL_NUM_THREADS = \"ALL_CPUS\" , GDAL_TIFF_INTERNAL_MASK = True , GDAL_TIFF_OVR_BLOCKSIZE = \"128\" , ) cog_translate ( src_path , dst_path , output_profile , config = config , in_memory = False , quiet = True , ** options , ) return True ref: github.com/developmentseed/cogeo-watchbot/blob/81df27470dd2eb7032d512c35af853b006d1c035/app/translator.py#L34-L56 Using the API with in MemoryFile \u00b6 Create COG from numpy array import numpy import mercantile from rasterio.io import MemoryFile from rasterio.transform import from_bounds from rio_cogeo.cogeo import cog_translate from rio_cogeo.profiles import cog_profiles # Create GeoTIFF profile bounds = mercantile . bounds ( mercantile . Tile ( 0 , 0 , 0 )) src_transform = from_bounds ( * bounds , 1024 , 1024 ) src_profile = dict ( driver = \"GTiff\" , dtype = \"float32\" , count = 3 , height = 1024 , width = 1024 , crs = \"epsg:4326\" , transform = dst_transform , ) img_array = tile = numpy . random . rand ( 3 , 1024 , 1024 ) . astype ( numpy . float32 ) with MemoryFile () as memfile : with memfile . open ( ** src_profile ) as mem : # Populate the input file with numpy array mem . write ( img_array ) dst_profile = cog_profiles . get ( \"deflate\" ) cog_translate ( mem , \"my-output-cog.tif\" , dst_profile , in_memory = True , quiet = True , ) Create output COG in Memory from rasterio.io import MemoryFile from rio_cogeo.cogeo import cog_translate from rio_cogeo.profiles import cog_profiles from boto3.session import Session as boto3_session dst_profile = cog_profiles . get ( \"deflate\" ) with MemoryFile () as mem_dst : # Important, we pass `mem_dst.name` as output dataset path cog_translate ( \"my-input-file.tif\" , mem_dst . name , profile , in_memory = True ) # You can then use the memoryfile to do something else like # upload to AWS S3 client = boto3_session . client ( \"s3\" ) client . upload_fileobj ( mem_dst , \"my-bucket\" , \"my-key\" )","title":"Application programming interface (API)"},{"location":"API/#using-the-api-with-in-memoryfile","text":"Create COG from numpy array import numpy import mercantile from rasterio.io import MemoryFile from rasterio.transform import from_bounds from rio_cogeo.cogeo import cog_translate from rio_cogeo.profiles import cog_profiles # Create GeoTIFF profile bounds = mercantile . bounds ( mercantile . Tile ( 0 , 0 , 0 )) src_transform = from_bounds ( * bounds , 1024 , 1024 ) src_profile = dict ( driver = \"GTiff\" , dtype = \"float32\" , count = 3 , height = 1024 , width = 1024 , crs = \"epsg:4326\" , transform = dst_transform , ) img_array = tile = numpy . random . rand ( 3 , 1024 , 1024 ) . astype ( numpy . float32 ) with MemoryFile () as memfile : with memfile . open ( ** src_profile ) as mem : # Populate the input file with numpy array mem . write ( img_array ) dst_profile = cog_profiles . get ( \"deflate\" ) cog_translate ( mem , \"my-output-cog.tif\" , dst_profile , in_memory = True , quiet = True , ) Create output COG in Memory from rasterio.io import MemoryFile from rio_cogeo.cogeo import cog_translate from rio_cogeo.profiles import cog_profiles from boto3.session import Session as boto3_session dst_profile = cog_profiles . get ( \"deflate\" ) with MemoryFile () as mem_dst : # Important, we pass `mem_dst.name` as output dataset path cog_translate ( \"my-input-file.tif\" , mem_dst . name , profile , in_memory = True ) # You can then use the memoryfile to do something else like # upload to AWS S3 client = boto3_session . client ( \"s3\" ) client . upload_fileobj ( mem_dst , \"my-bucket\" , \"my-key\" )","title":"Using the API with in MemoryFile"},{"location":"Advanced/","text":"Web-Optimized COG \u00b6 rio-cogeo provide a --web-optimized option which aims to create a web-tiling friendly COG. Output dataset features: bounds and internal tiles aligned with web-mercator grid. raw data and overviews resolution match mercator zoom level resolution. Important Because it will certainly create a larger file (with padding tiles on the side of the file), a nodata value, an alpha band or an internal mask should be present in the input dataset. If not the original data will be surrounded by black (0) data. Internal tile size \u00b6 By default rio cogeo will create a dataset with 512x512 internal tile size. This can be updated by passing --co BLOCKXSIZE=64 --co BLOCKYSIZE=64 options. Web tiling optimization Creating a Web-Optimized COG, means you'll get a file which is perfectly aligned (bounds and internal tiles) with the mercator grid and with resolution (for the raw data and overview) which map the mercator zoom level resolution. This enable to reduce the number of GET request a dynamic tiling service needs to do to create a map tile from your COG. if the input dataset is not aligned to web mercator grid, the tiler will need to fetch multiple internal tiles. Overview levels \u00b6 By default rio cogeo will calculate the optimal overview level based on dataset size and internal tile size (overview should not be smaller than internal tile size (e.g 512px). Overview level will be translated to decimation level of power of two: overview_level = 3 overviews = [ 2 ** j for j in range ( 1 , overview_level + 1 )] print ( overviews ) [ 2 , 4 , 8 ] Band metadata \u00b6 By default rio cogeo DO NOT forward band metadata (e.g statistics) to the output dataset. $ gdalinfo my_file.tif ... Band 1 Block=576x1 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Unit Type: mol mol-1 Metadata: long_name=CO2 Dry-Air Column Average missing_value=9.9999999e+14 NETCDF_DIM_time=0 NETCDF_VARNAME=XCO2MEAN units=mol mol-1 _FillValue=9.9999999e+14 $ rio cogeo my_file.tif my_cog.tif --blocksize 256 $ gdalinfo my_cog.tif ... Band 1 Block=256x256 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Overviews: 288x181 You can use --forward-band-tags to forwards the band metadata to output dataset. $ rio cogeo create my_file.tif my_cog.tif --blocksize 256 --forward-band-tags $ gdalinfo my_cog.tif ... Band 1 Block=256x256 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Overviews: 288x181 Metadata: long_name=CO2 Dry-Air Column Average missing_value=9.9999999e+14 NETCDF_DIM_time=0 NETCDF_VARNAME=XCO2MEAN units=mol mol-1 _FillValue=9.9999999e+14 Nodata, Alpha and Mask \u00b6 By default rio-cogeo will forward any nodata value or alpha channel to the output COG. If your dataset type is Byte or Unit16 , you could use internal bit mask (with the --add-mask option) to replace the Nodata value or Alpha band in output dataset (supported by most GDAL based backends). Note: when adding a mask with an input dataset having an alpha band you'll need to use the bidx options to remove it from the output dataset. # Replace the alpha band by an internal mask $ rio cogeo mydataset_withalpha.tif mydataset_withmask.tif --cog-profile raw --add-mask --bidx 1 ,2,3 Important Using internal nodata value with lossy compression ( webp , jpeg ) is not recommanded. Please use internal masking (or alpha band if using webp).","title":"Advanced Topics"},{"location":"Advanced/#web-optimized-cog","text":"rio-cogeo provide a --web-optimized option which aims to create a web-tiling friendly COG. Output dataset features: bounds and internal tiles aligned with web-mercator grid. raw data and overviews resolution match mercator zoom level resolution. Important Because it will certainly create a larger file (with padding tiles on the side of the file), a nodata value, an alpha band or an internal mask should be present in the input dataset. If not the original data will be surrounded by black (0) data.","title":"Web-Optimized COG"},{"location":"Advanced/#internal-tile-size","text":"By default rio cogeo will create a dataset with 512x512 internal tile size. This can be updated by passing --co BLOCKXSIZE=64 --co BLOCKYSIZE=64 options. Web tiling optimization Creating a Web-Optimized COG, means you'll get a file which is perfectly aligned (bounds and internal tiles) with the mercator grid and with resolution (for the raw data and overview) which map the mercator zoom level resolution. This enable to reduce the number of GET request a dynamic tiling service needs to do to create a map tile from your COG. if the input dataset is not aligned to web mercator grid, the tiler will need to fetch multiple internal tiles.","title":"Internal tile size"},{"location":"Advanced/#overview-levels","text":"By default rio cogeo will calculate the optimal overview level based on dataset size and internal tile size (overview should not be smaller than internal tile size (e.g 512px). Overview level will be translated to decimation level of power of two: overview_level = 3 overviews = [ 2 ** j for j in range ( 1 , overview_level + 1 )] print ( overviews ) [ 2 , 4 , 8 ]","title":"Overview levels"},{"location":"Advanced/#band-metadata","text":"By default rio cogeo DO NOT forward band metadata (e.g statistics) to the output dataset. $ gdalinfo my_file.tif ... Band 1 Block=576x1 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Unit Type: mol mol-1 Metadata: long_name=CO2 Dry-Air Column Average missing_value=9.9999999e+14 NETCDF_DIM_time=0 NETCDF_VARNAME=XCO2MEAN units=mol mol-1 _FillValue=9.9999999e+14 $ rio cogeo my_file.tif my_cog.tif --blocksize 256 $ gdalinfo my_cog.tif ... Band 1 Block=256x256 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Overviews: 288x181 You can use --forward-band-tags to forwards the band metadata to output dataset. $ rio cogeo create my_file.tif my_cog.tif --blocksize 256 --forward-band-tags $ gdalinfo my_cog.tif ... Band 1 Block=256x256 Type=Float64, ColorInterp=Gray NoData Value=999999986991104 Overviews: 288x181 Metadata: long_name=CO2 Dry-Air Column Average missing_value=9.9999999e+14 NETCDF_DIM_time=0 NETCDF_VARNAME=XCO2MEAN units=mol mol-1 _FillValue=9.9999999e+14","title":"Band metadata"},{"location":"Advanced/#nodata-alpha-and-mask","text":"By default rio-cogeo will forward any nodata value or alpha channel to the output COG. If your dataset type is Byte or Unit16 , you could use internal bit mask (with the --add-mask option) to replace the Nodata value or Alpha band in output dataset (supported by most GDAL based backends). Note: when adding a mask with an input dataset having an alpha band you'll need to use the bidx options to remove it from the output dataset. # Replace the alpha band by an internal mask $ rio cogeo mydataset_withalpha.tif mydataset_withmask.tif --cog-profile raw --add-mask --bidx 1 ,2,3 Important Using internal nodata value with lossy compression ( webp , jpeg ) is not recommanded. Please use internal masking (or alpha band if using webp).","title":"Nodata, Alpha and Mask"},{"location":"CLI/","text":"rio-cogeo modules adds a cogeo sub-command to your rasterio (rio) CLI. Three (3) commands are then available: create , info and validate . $ rio cogeo --help Usage: rio cogeo [OPTIONS] COMMAND [ARGS]... Rasterio cogeo subcommands. Options: --version Show the version and exit. --help Show this message and exit. Commands: create Create COGEO info Lists information about a raster dataset. validate Validate COGEO Create \u00b6 $ rio cogeo create --help Usage: rio cogeo create [OPTIONS] INPUT OUTPUT Create Cloud Optimized Geotiff. Options: --bidx, -b Band indexes to copy. --cog-profile, -p CloudOptimized GeoTIFF profile (default: deflate). [jpeg|webp|zstd|lzw|deflate|packbits|lzma|lerc|lerc_deflate|lerc_zstd|raw] --nodata Set nodata masking values for input dataset. --add-mask Force output dataset creation with an internal mask (convert alpha band or nodata to mask). --blocksize Overwrite profile's tile size. --dtype, -t Output data type. [ubyte|uint8|uint16|int16|uint32|int32|float32|float64] --overview-level Overview level (if not provided, appropriate overview level will be selected until the smallest overview is smaller than the value of the internal blocksize) --overview-resampling Overview creation resampling algorithm (default: nearest). [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss] --overview-blocksize Overview's internal tile size (default defined by GDAL_TIFF_OVR_BLOCKSIZE env or 128) --web-optimized, -w Create COGEO optimized for Web. --zoom-level-strategy Strategy to determine zoom level (default: auto). [lower|upper|auto] --aligned-levels Number of overview levels for which GeoTIFF tile and tiles defined in the tiling scheme match. --resampling, -r Resampling algorithm (default: nearest). Will only be applied with the `--web-optimized` option. [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss] --in-memory / --no-in-memory Force processing raster in memory / not in memory (default: process in memory if smaller than 120 million pixels) --allow-intermediate-compression Allow intermediate file compression to reduce memory/disk footprint. --forward-band-tags Forward band tags to output bands. --threads Number of worker threads for multi-threaded compression (default: ALL_CPUS) --co, --profile Driver specific creation options. See the documentation for the selected output driver for more information. --config GDAL configuration options. --quiet, -q Remove progressbar and other non-error output. --help Show this message and exit. Validate \u00b6 $ rio cogeo validate --help Usage: rio cogeo validate [OPTIONS] INPUT Validate Cloud Optimized Geotiff. Options: --strict Treat warnings as errors. --help Show this message and exit. The strict options will treat warnings (e.g missing overviews) as errors. Info \u00b6 (extented version or rio info ). $ rio cogeo info --help Usage: rio cogeo info [OPTIONS] INPUT Dataset info. Options: --json Print as JSON. --help Show this message and exit. Examples \u00b6 # Create a COGEO with DEFLATE compression (Using default `Deflate` profile) $ rio cogeo create mydataset.tif mydataset_jpeg.tif # Validate COGEO $ rio cogeo validate mydataset_jpeg.tif # Create a COGEO with JPEG profile and the first 3 bands of the data and add internal mask $ rio cogeo create mydataset.tif mydataset_jpeg.tif -b 1 ,2,3 --add-mask --cog-profile jpeg # List Raster info $ rio cogeo info mydataset_jpeg.tif Driver: GTiff File: mydataset_jpeg.tif COG: True Compression: DEFLATE ColorSpace: None Profile Width: 10980 Height: 10980 Bands: 1 Tiled: True Dtype: uint16 NoData: 0 .0 Alpha Band: False Internal Mask: False Interleave: BAND Colormap: False Geo Crs: EPSG:32634 Origin: ( 699960 .0, 3600000 .0 ) Resolution: ( 10 .0, -10.0 ) BoundingBox: ( 699960 .0, 3490200 .0, 809760 .0, 3600000 .0 ) MinZoom: 10 MaxZoom: 19 IFD Id Size BlockSize Decimation 0 10980x10980 1024x1024 0 1 5490x5490 128x128 2 2 2745x2745 128x128 4 3 1373x1373 128x128 8 4 687x687 128x128 16","title":"Command-line interface (CLI)"},{"location":"CLI/#create","text":"$ rio cogeo create --help Usage: rio cogeo create [OPTIONS] INPUT OUTPUT Create Cloud Optimized Geotiff. Options: --bidx, -b Band indexes to copy. --cog-profile, -p CloudOptimized GeoTIFF profile (default: deflate). [jpeg|webp|zstd|lzw|deflate|packbits|lzma|lerc|lerc_deflate|lerc_zstd|raw] --nodata Set nodata masking values for input dataset. --add-mask Force output dataset creation with an internal mask (convert alpha band or nodata to mask). --blocksize Overwrite profile's tile size. --dtype, -t Output data type. [ubyte|uint8|uint16|int16|uint32|int32|float32|float64] --overview-level Overview level (if not provided, appropriate overview level will be selected until the smallest overview is smaller than the value of the internal blocksize) --overview-resampling Overview creation resampling algorithm (default: nearest). [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss] --overview-blocksize Overview's internal tile size (default defined by GDAL_TIFF_OVR_BLOCKSIZE env or 128) --web-optimized, -w Create COGEO optimized for Web. --zoom-level-strategy Strategy to determine zoom level (default: auto). [lower|upper|auto] --aligned-levels Number of overview levels for which GeoTIFF tile and tiles defined in the tiling scheme match. --resampling, -r Resampling algorithm (default: nearest). Will only be applied with the `--web-optimized` option. [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss] --in-memory / --no-in-memory Force processing raster in memory / not in memory (default: process in memory if smaller than 120 million pixels) --allow-intermediate-compression Allow intermediate file compression to reduce memory/disk footprint. --forward-band-tags Forward band tags to output bands. --threads Number of worker threads for multi-threaded compression (default: ALL_CPUS) --co, --profile Driver specific creation options. See the documentation for the selected output driver for more information. --config GDAL configuration options. --quiet, -q Remove progressbar and other non-error output. --help Show this message and exit.","title":"Create"},{"location":"CLI/#validate","text":"$ rio cogeo validate --help Usage: rio cogeo validate [OPTIONS] INPUT Validate Cloud Optimized Geotiff. Options: --strict Treat warnings as errors. --help Show this message and exit. The strict options will treat warnings (e.g missing overviews) as errors.","title":"Validate"},{"location":"CLI/#info","text":"(extented version or rio info ). $ rio cogeo info --help Usage: rio cogeo info [OPTIONS] INPUT Dataset info. Options: --json Print as JSON. --help Show this message and exit.","title":"Info"},{"location":"CLI/#examples","text":"# Create a COGEO with DEFLATE compression (Using default `Deflate` profile) $ rio cogeo create mydataset.tif mydataset_jpeg.tif # Validate COGEO $ rio cogeo validate mydataset_jpeg.tif # Create a COGEO with JPEG profile and the first 3 bands of the data and add internal mask $ rio cogeo create mydataset.tif mydataset_jpeg.tif -b 1 ,2,3 --add-mask --cog-profile jpeg # List Raster info $ rio cogeo info mydataset_jpeg.tif Driver: GTiff File: mydataset_jpeg.tif COG: True Compression: DEFLATE ColorSpace: None Profile Width: 10980 Height: 10980 Bands: 1 Tiled: True Dtype: uint16 NoData: 0 .0 Alpha Band: False Internal Mask: False Interleave: BAND Colormap: False Geo Crs: EPSG:32634 Origin: ( 699960 .0, 3600000 .0 ) Resolution: ( 10 .0, -10.0 ) BoundingBox: ( 699960 .0, 3490200 .0, 809760 .0, 3600000 .0 ) MinZoom: 10 MaxZoom: 19 IFD Id Size BlockSize Decimation 0 10980x10980 1024x1024 0 1 5490x5490 128x128 2 2 2745x2745 128x128 4 3 1373x1373 128x128 8 4 687x687 128x128 16","title":"Examples"},{"location":"Is_it_a_COG/","text":"How to recognize a COG and how to create a proper one! \u00b6 Requirements python 3.7 rio-cogeo $ pip install rio-cogeo The COG Specification is pretty basic A cloud optimized GeoTIFF is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range request (\"bytes: start_offset-end_offset\" HTTP header). It contains at its beginning the metadata of the full resolution imagery, followed by the optional presence of overview metadata, and finally the imagery itself. To make it friendly with streaming and progressive rendering, we recommand starting with the imagery of the smallest overview and finishing with the imagery of the full resolution level. Ref: github.com/cogeotiff/cog-spec/blob/master/spec.md In Short, the specification just means you MUST create a GeoTIFF with internal block (tile) and the header must be ordered. From a command line point of view, it just means you need to add --co TILED=TRUE in a gdal_translate command. 1. Get some data \u00b6 Natural Earth web site host really neat raster and vector datasets. Let's download a large scale raster image: www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/ $ wget https://naciscdn.org/naturalearth/50m/raster/HYP_50M_SR.zip 2. Inspect the data \u00b6 Here is what we want to look at: the size in row x lines the data type (byte, float, complex \u2026) the internal block size the presence of overview or not $ rio cogeo info HYP_50M_SR.tif Driver: GTiff File: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif Compression: None ColorSpace: None Profile Width: 10800 Height: 5400 Bands: 3 Tiled: False Dtype: uint8 NoData: None Alpha Band: False Internal Mask: False Interleave: PIXEL ColorMap: False Geo Crs: EPSG:4326 Origin: (-179.99999999999997, 90.0) Resolution: (0.03333333333333, -0.03333333333333) BoundingBox: (-179.99999999999997, -89.99999999998201, 179.99999999996405, 90.0) IFD Id Size BlockSize Decimation 0 10800x5400 10800x1 0 What we can see from the rio cogeo info output: The raster has 3 bands The data type is Byte (0 \u2192 255) It's not internally tiled ( Tiled: false and BlockSize=10800x1 ) There is no overview (Only one IFD) With those informations we already know the GeoTIFF is not a COG (no internal blocks), but let's confirm with the validation script. 3. COG validation \u00b6 $ rio cogeo validate HYP_50M_SR.tif The following warnings were found: - The file is greater than 512xH or 512xW, it is recommended to include internal overviews The following errors were found: - The file is greater than 512xH or 512xW, but is not tiled - The offset of the main IFD should be 8 for ClassicTIFF or 16 for BigTIFF. It is 174982088 instead - The offset of the first block of the image should be after its IFD /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif is NOT a valid cloud optimized GeoTIFF As mentioned earlier, the validation script confirms the GeoTIFF is not internally tiled and doesn't have overviews. 4. COG creation \u00b6 Creating a valid Cloud Optimized GeoTIFF, is not just about creating internal tiles and/or internal overviews. The file internal structure has to be specific and require a complete copy of a file, which is what rio-cogeo does internally. $ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG.tif Reading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif [####################################] 100% Adding overviews... Updating dataset tags... Writing output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif You could get the same COG with GDAL commands $ gdal_translate HYP_50M_SR.tif tmp.tif -co TILED=YES -co COMPRESS=DEFLATE $ gdaladdo -r nearest tmp.tif 2 4 8 16 32 $ gdal_translate tmp.tif HYP_50M_SR_COG.tif -co TILED=YES -co COMPRESS=DEFLATE -co COPY_SRC_OVERVIEWS=YES By default rio-cogeo will create a COG with 512x512 blocksize (for the raw resolution) and use DEFLATE compression to reduce file size. $ rio cogeo info HYP_50M_SR_COG.tif Driver: GTiff File: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif Compression: DEFLATE ColorSpace: None Profile Width: 10800 Height: 5400 Bands: 3 Tiled: True Dtype: uint8 NoData: None Alpha Band: False Internal Mask: False Interleave: PIXEL ColorMap: False Geo Crs: EPSG:4326 Origin: (-179.99999999999997, 90.0) Resolution: (0.03333333333333001, -0.03333333333333001) BoundingBox: (-179.99999999999997, -89.99999999998204, 179.9999999999641, 90.0) IFD Id Size BlockSize Decimation 0 10800x5400 512x512 0 1 5400x2700 128x128 2 2 2700x1350 128x128 4 3 1350x675 128x128 8 4 675x338 128x128 16 The importance of the compression $ ls -lah -rw-r--r--@ 1 youpi staff 167M Oct 18 2014 HYP_50M_SR.tif -rw-r--r-- 1 youpi staff 58M Jun 12 14:56 HYP_50M_SR_COG.tif By using rio-cogeo , we are not only creating a valid COG with internal tiling but we are also adding internal overviews (which let us get previews of the raw resolution with few GET requests). Even with the addition of 4 levels of overviews (see IFD section in previous rio cogeo info output), we managed to reduce the file size by 3 (167Mb \u2192 58Mb), and this is because rio cogeo applies Deflate compression by default to the COG. More Magic ? As seen in the first rio cogeo info output, the data has 3 bands (RGB) and is of Uint8 data type. Because of this configuration, we can use even more efficient compression like JPEG or WEBP. $ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG_jpeg.tif -p jpeg Reading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif [####################################] 100% Adding overviews... Updating dataset tags... Writing output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG_jpeg.tif $ ls -lah -rw-r--r--@ 1 vincentsarago staff 167M Oct 18 2014 HYP_50M_SR.tif -rw-r--r-- 1 vincentsarago staff 58M Jun 12 14:56 HYP_50M_SR_COG.tif -rw-r--r-- 1 vincentsarago staff 4.8M Jun 15 11:08 HYP_50M_SR_COG_jpeg.tif Now, our output file is only 4.8Mb, which is only ~3% of the original size \ud83d\ude31. Note: JPEG compression is not lossless but lossy , meaning we will loose some information (change in pixel values) but if you need a COG for visual purposes the gain in size might be worth it. WEBP compression has a configuration option to be lossless and will result is a file which will be ~50% smaller than the deflate version. Sadly WEBP is not provided by default in geospatial software. 5. Visualize \u00b6 You can either load the COG in QGIS or use our plugin (rio-viz) to load it in a web browser. $ pip install rio-viz $ rio viz HYP_50M_SR_COG.tif","title":"How To"},{"location":"Is_it_a_COG/#how-to-recognize-a-cog-and-how-to-create-a-proper-one","text":"Requirements python 3.7 rio-cogeo $ pip install rio-cogeo The COG Specification is pretty basic A cloud optimized GeoTIFF is a regular GeoTIFF file, aimed at being hosted on a HTTP file server, whose internal organization is friendly for consumption by clients issuing HTTP GET range request (\"bytes: start_offset-end_offset\" HTTP header). It contains at its beginning the metadata of the full resolution imagery, followed by the optional presence of overview metadata, and finally the imagery itself. To make it friendly with streaming and progressive rendering, we recommand starting with the imagery of the smallest overview and finishing with the imagery of the full resolution level. Ref: github.com/cogeotiff/cog-spec/blob/master/spec.md In Short, the specification just means you MUST create a GeoTIFF with internal block (tile) and the header must be ordered. From a command line point of view, it just means you need to add --co TILED=TRUE in a gdal_translate command.","title":"How to recognize a COG and how to create a proper one!"},{"location":"Is_it_a_COG/#1-get-some-data","text":"Natural Earth web site host really neat raster and vector datasets. Let's download a large scale raster image: www.naturalearthdata.com/downloads/50m-raster-data/50m-cross-blend-hypso/ $ wget https://naciscdn.org/naturalearth/50m/raster/HYP_50M_SR.zip","title":"1. Get some data"},{"location":"Is_it_a_COG/#2-inspect-the-data","text":"Here is what we want to look at: the size in row x lines the data type (byte, float, complex \u2026) the internal block size the presence of overview or not $ rio cogeo info HYP_50M_SR.tif Driver: GTiff File: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif Compression: None ColorSpace: None Profile Width: 10800 Height: 5400 Bands: 3 Tiled: False Dtype: uint8 NoData: None Alpha Band: False Internal Mask: False Interleave: PIXEL ColorMap: False Geo Crs: EPSG:4326 Origin: (-179.99999999999997, 90.0) Resolution: (0.03333333333333, -0.03333333333333) BoundingBox: (-179.99999999999997, -89.99999999998201, 179.99999999996405, 90.0) IFD Id Size BlockSize Decimation 0 10800x5400 10800x1 0 What we can see from the rio cogeo info output: The raster has 3 bands The data type is Byte (0 \u2192 255) It's not internally tiled ( Tiled: false and BlockSize=10800x1 ) There is no overview (Only one IFD) With those informations we already know the GeoTIFF is not a COG (no internal blocks), but let's confirm with the validation script.","title":"2. Inspect the data"},{"location":"Is_it_a_COG/#3-cog-validation","text":"$ rio cogeo validate HYP_50M_SR.tif The following warnings were found: - The file is greater than 512xH or 512xW, it is recommended to include internal overviews The following errors were found: - The file is greater than 512xH or 512xW, but is not tiled - The offset of the main IFD should be 8 for ClassicTIFF or 16 for BigTIFF. It is 174982088 instead - The offset of the first block of the image should be after its IFD /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif is NOT a valid cloud optimized GeoTIFF As mentioned earlier, the validation script confirms the GeoTIFF is not internally tiled and doesn't have overviews.","title":"3. COG validation"},{"location":"Is_it_a_COG/#4-cog-creation","text":"Creating a valid Cloud Optimized GeoTIFF, is not just about creating internal tiles and/or internal overviews. The file internal structure has to be specific and require a complete copy of a file, which is what rio-cogeo does internally. $ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG.tif Reading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif [####################################] 100% Adding overviews... Updating dataset tags... Writing output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif You could get the same COG with GDAL commands $ gdal_translate HYP_50M_SR.tif tmp.tif -co TILED=YES -co COMPRESS=DEFLATE $ gdaladdo -r nearest tmp.tif 2 4 8 16 32 $ gdal_translate tmp.tif HYP_50M_SR_COG.tif -co TILED=YES -co COMPRESS=DEFLATE -co COPY_SRC_OVERVIEWS=YES By default rio-cogeo will create a COG with 512x512 blocksize (for the raw resolution) and use DEFLATE compression to reduce file size. $ rio cogeo info HYP_50M_SR_COG.tif Driver: GTiff File: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG.tif Compression: DEFLATE ColorSpace: None Profile Width: 10800 Height: 5400 Bands: 3 Tiled: True Dtype: uint8 NoData: None Alpha Band: False Internal Mask: False Interleave: PIXEL ColorMap: False Geo Crs: EPSG:4326 Origin: (-179.99999999999997, 90.0) Resolution: (0.03333333333333001, -0.03333333333333001) BoundingBox: (-179.99999999999997, -89.99999999998204, 179.9999999999641, 90.0) IFD Id Size BlockSize Decimation 0 10800x5400 512x512 0 1 5400x2700 128x128 2 2 2700x1350 128x128 4 3 1350x675 128x128 8 4 675x338 128x128 16 The importance of the compression $ ls -lah -rw-r--r--@ 1 youpi staff 167M Oct 18 2014 HYP_50M_SR.tif -rw-r--r-- 1 youpi staff 58M Jun 12 14:56 HYP_50M_SR_COG.tif By using rio-cogeo , we are not only creating a valid COG with internal tiling but we are also adding internal overviews (which let us get previews of the raw resolution with few GET requests). Even with the addition of 4 levels of overviews (see IFD section in previous rio cogeo info output), we managed to reduce the file size by 3 (167Mb \u2192 58Mb), and this is because rio cogeo applies Deflate compression by default to the COG. More Magic ? As seen in the first rio cogeo info output, the data has 3 bands (RGB) and is of Uint8 data type. Because of this configuration, we can use even more efficient compression like JPEG or WEBP. $ rio cogeo create HYP_50M_SR.tif HYP_50M_SR_COG_jpeg.tif -p jpeg Reading input: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR.tif [####################################] 100% Adding overviews... Updating dataset tags... Writing output to: /Users/vincentsarago/Downloads/HYP_50M_SR/HYP_50M_SR_COG_jpeg.tif $ ls -lah -rw-r--r--@ 1 vincentsarago staff 167M Oct 18 2014 HYP_50M_SR.tif -rw-r--r-- 1 vincentsarago staff 58M Jun 12 14:56 HYP_50M_SR_COG.tif -rw-r--r-- 1 vincentsarago staff 4.8M Jun 15 11:08 HYP_50M_SR_COG_jpeg.tif Now, our output file is only 4.8Mb, which is only ~3% of the original size \ud83d\ude31. Note: JPEG compression is not lossless but lossy , meaning we will loose some information (change in pixel values) but if you need a COG for visual purposes the gain in size might be worth it. WEBP compression has a configuration option to be lossless and will result is a file which will be ~50% smaller than the deflate version. Sadly WEBP is not provided by default in geospatial software.","title":"4. COG creation"},{"location":"Is_it_a_COG/#5-visualize","text":"You can either load the COG in QGIS or use our plugin (rio-viz) to load it in a web browser. $ pip install rio-viz $ rio viz HYP_50M_SR_COG.tif","title":"5. Visualize"},{"location":"contributing/","text":"Contributing \u00b6 Issues and pull requests are more than welcome. dev install $ git clone https://github.com/cogeotiff/rio-cogeo.git $ cd rio-cogeo $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 $ git clone https://github.com/cogeotiff/rio-cogeo.git $ cd rio-cogeo $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#contributing","text":"Issues and pull requests are more than welcome. dev install $ git clone https://github.com/cogeotiff/rio-cogeo.git $ cd rio-cogeo $ pip install -e . [ dev ] Python3.7 only This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"Contributing"},{"location":"contributing/#docs","text":"$ git clone https://github.com/cogeotiff/rio-cogeo.git $ cd rio-cogeo $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Docs"},{"location":"profile/","text":"rio-cogeo defines default Cloud Optimized GeoTIFF profiles which user can use with the CLI or directly with the API. Default profiles are tiled ( tiled=True ) with 512x512 blocksizes . from rio_cogeo.profiles import cog_profiles cog_profiles > { 'jpeg' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'JPEG' , 'photometric' : 'YCbCr' }, 'webp' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'WEBP' }, 'zstd' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'ZSTD' }, 'lzw' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'LZW' }, 'deflate' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'DEFLATE' } 'packbits' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'PACKBITS' }, 'lzma' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'LZMA' }, 'lerc' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'LERC' }, 'lerc_deflate' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'LERC_DEFLATE' }, 'lerc_zstd' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 , 'compress' : 'LERC_ZSTD' }, 'raw' : { 'driver' : 'GTiff' , 'interleave' : 'pixel' , 'tiled' : True , 'blockxsize' : 512 , 'blockysize' : 512 } } JPEG JPEG compression PIXEL interleave YCbCr (3 bands) colorspace or MINISBLACK (1 band) limited to uint8 datatype and 3 bands data WEBP WEBP compression PIXEL interleave limited to uint8 datatype and 3 or 4 bands data Non-Standard, might not be supported by software not build against GDAL+internal libtiff + libwebp Available for GDAL>=2.4.0 ZSTD ZSTD compression PIXEL interleave Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd Available for GDAL>=2.3.0 Note in Nov 2018, there was a change in libtiff's ZSTD tags which create incompatibility for old ZSTD compressed GeoTIFF (link) LZW LZW compression PIXEL interleave DEFLATE DEFLATE compression PIXEL interleave PACKBITS PACKBITS compression PIXEL interleave LZMA LZMA compression PIXEL interleave LERC LERC compression PIXEL interleave Default MAX_Z_ERROR=0 (lossless) Non-Standard, might not be supported by software not build against GDAL + internal libtiff Available for GDAL>=2.4.0 LERC_DEFLATE LERC_DEFLATE compression PIXEL interleave Default MAX_Z_ERROR=0 (lossless) Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd Available for GDAL>=2.4.0 LERC_ZSTD LERC_ZSTD compression PIXEL interleave Default MAX_Z_ERROR=0 (lossless) Non-Standard, might not be supported by software not build against GDAL + internal libtiff + libzstd Available for GDAL>=2.4.0 RAW NO compression PIXEL interleave Custom \u00b6 Profiles can be extended by providing '--co' option in command line # Create a COGEO without compression and with 1024x1024 block size and 256 overview blocksize $ rio cogeo create mydataset.tif mydataset_raw.tif --co BLOCKXSIZE = 1024 --co BLOCKYSIZE = 1024 --cog-profile raw --overview-blocksize 256 See gdal.org/drivers/raster/gtiff.html#creation-options for full details of creation options.","title":"COG Profiles"},{"location":"profile/#custom","text":"Profiles can be extended by providing '--co' option in command line # Create a COGEO without compression and with 1024x1024 block size and 256 overview blocksize $ rio cogeo create mydataset.tif mydataset_raw.tif --co BLOCKXSIZE = 1024 --co BLOCKYSIZE = 1024 --cog-profile raw --overview-blocksize 256 See gdal.org/drivers/raster/gtiff.html#creation-options for full details of creation options.","title":"Custom"},{"location":"release-notes/","text":"Release Notes \u00b6 Next (TBD) \u00b6 drop support for Python 3.5 ( cogeotiff/rio-cogeo#173 ) allow pathlib.PurePath object as input and output ( cogeotiff/rio-cogeo#173 ) add top-level exports ( cogeotiff/rio-cogeo#169 ) # before from rio_cogeo.cogeo import cog_translate , cog_validate , cog_info from rio_cogeo.profiles import cog_profiles # now from rio_cogeo import cog_translate , cog_validate , cog_info , cog_profiles 2.1.0 (2020-12-18) \u00b6 switch to morecantile and update the web-optimized creation method to better match GDAL 3.2. add zoom_level_strategy options to match GDAL 3.2 COG driver. add aligned_levels (cli and api) to select the level of overview to align with the TMS grid. Breaking Changes: * removed --latitude-adjustment/--global-maxzoom option in the CLI * removed latitude_adjustment option in rio_cogeo.cogeo.cog_translate * updated overview blocksize to match the blocksize of the high resolution data (instead of default to 128) * for web-optimized COG, the highest overview level will be aligned with the TMS grid. 2.0.1 (2020-10-07) \u00b6 remove pkg_resources ( pypa/setuptools#510 ) 2.0.0 (2020-10-05) \u00b6 There have been no changes since 2.0a9 2.0a9 (2020-10-03) \u00b6 Update max IFD offset to 300 bytes ( cogeotiff/rio-cogeo#158 ) 2.0a8 (2020-09-28) \u00b6 Make sure Alpha band isn't considered as an internal mask by utils.has_mask_band (#156) 2.0a7.post1 (2020-09-23) \u00b6 Fix wrong min-zoom calculation in rio_cogeo.cogeo.cog_info 2.0a7 (2020-09-23) \u00b6 remove duplicate count information in rio_cogeo.cogeo.cog_info output (#150) allow COG with IFD offset up to 200 bytes to accomodate with GDAL 3.1 changes (#151) fix zoom level calculation in rio_cogeo.cogeo.cog_info 2.0a6 (2020-08-18) \u00b6 fix bug in cogeo.info when CRS in not set. add minzoom/maxzoom in cogeo.info output. Breaking Changes: * rio_cogeo.utils.get_max_zoom renamed rio_cogeo.utils.get_zooms and now return min/max zoom. 2.0a5 (2020-07-31) \u00b6 move most of the cogeo info code in rio_cogeo.cogeo.cog_info api add cog_validation info in cogeo info result cog_validate returns a tuple (is_valid, errors, warnings) (#142, co-author with @geospatial-jeff) add scale, offset, image tags and band color interpretation in cog_info (#145, #146 and #147) 2.0a4 (2020-06-15) \u00b6 Force output width and height (#140) 2.0a3 (2020-06-15) \u00b6 add info CLI (#134) use Deflate as default temporary compression (#137) 2.0a2 (2020-05-20) \u00b6 add --config CLI option to pass additional GDAL Configuration options (#135) 2.0a1 (2020-05-07) \u00b6 Dropping python 2 (#128) use new mercantile xy_bounds for better web-optimized file (#126) Allow temporary file on disk when using MemoryFile output add --blocksize option in CLI (#131) depreciate rio_cogeo.utils.get_maximum_overview_level and use rasterio.rio.overview.get_maximum_overview_level (#132) 1.1.10 (2020-02-21) \u00b6 Transfer colormap (#121) 1.1.9 (2020-02-06) \u00b6 Transfer scale and offset values to output COG (#118) 1.1.8 (2020-01-08) \u00b6 Transfer color interpretation value to output COG (#113) * Thanks @pierotofy Cast dataset_mask returned by rasterio to uint8 to overcome a bug in rasterio 1.1.2 (#115) 1.1.7 (2019-12-02) \u00b6 add strict option to cog_validate to treat warnings as error (#109) * Thanks @pierotofy add documentation examples using MemoryFiles (#108 #107) Switch to PHOTOMETRIC=MINISBLACK when PHOTOMETRIC is set to YCBCR for 1 band dataset (#41) 1.1.6 (2019-11-13) \u00b6 add -forward-band-tags options (#115) 1.1.5 (2019-10-04) \u00b6 add --allow-intermediate-compression option to reduce the memory/disk footprint (#103) 1.1.4 (2019-10-03) \u00b6 Fix support for optimizing open datasets, memfiles, and VRTs (#100 from j08lue) 1.1.3 (2019-09-16) \u00b6 Add lzma/lerc/lerc_deflate/lerc_zstd profiles (#97) Add warnings and notes for non-standard compression (#97) fix THREADS definition for GDAL config 1.1.2 (2019-09-12) \u00b6 Fix incorrect context behavior closing input Dataset (#94) 1.1.1 (2019-09-10) \u00b6 add safeguard to keep datatype from input to output files (#85) CLI Changes: * add -t, --dtype datatype option. API Changes: * add datatype option * update for rasterio>=1.0.28 * allow rasterio.io.DatasetReader input (#89) Note: This release was deleted in PyPi. 1.1.0 (2019-07-16) \u00b6 check internal blocksize and adapt if raster is too small (#80) 1.0.0 (2019-04-19) \u00b6 add --web-optimized option to create a web optimized COG (#10) add --latitude-adjustment/--global-maxzoom option to adjust MAX_ZOOM for global datasets Web-optimized tests needs python3.6 (cogdumper) add --resampling option to select the resampling algorithm when using --web-optimized add --in-memory/--no-in-memory options to use temporyNamedd file instead of in-memory temp file. 1.0b3 (2019-03-30) \u00b6 Breaking Changes: remove deprecated YCBCR profile 512x512 dataset without internal tiling are valid 1.0b2 (2019-03-27) \u00b6 Breaking Changes: Switch from JPEG to DEFLATE as default profile in CLI (#66) 1.0b1 (2019-03-25) \u00b6 Breaking Changes: refactor utils.get_maximum_overview_level to get rasterio dataset as input and reduce the number of dataset opennings (#61) 1.0b0 (2019-03-15) \u00b6 add more logging and --quiet option (#46) add --overview-blocksize to set overview's internal tile size (#60) Bug fixes: copy tags and description from input to output (#19) copy input mask band to output mask Breaking Changes: rio cogeo now has subcommands: 'create' and 'validate' (#6). internal mask creation is now optional (--add-mask). internal nodata or alpha channel can be forwarded to the output dataset. removed default overview blocksize to be equal to the raw data blocksize (#60) 1.0dev10 (2019-02-12) \u00b6 allow non integer nodata value (#51) fix GDAL blocksize options casting for overview calculation (#50) 1.0dev9 (2019-02-11) \u00b6 Renamed \"ycbcr\" profile's name to \"jpeg\" to reflect the compression name. \"ycbcr\" profile will raise a \"DeprecationWarning\" (#44) \"webp\" profile has been added to COG profiles. Exploitation of this new compression mode will require GDAL 2.4 (#27) Rio-cogeo can calculate the overview level based on the internal tile size and the dataset width/height (#37) 1.0dev8 (2018-10-02) \u00b6 write tags in output file (#31) add bilinear, cubic spline, lanczos resampling modes for overviews 1.0dev7 (2018-09-12) \u00b6 add resampling option for overviews (#28) 1.0dev6 (2018-08-23) \u00b6 Remove unnecessary compression for in-memory step (reduce runtime and memory usage) (#25) 1.0dev4 (2018-07-16) \u00b6 rasterio 1.0 1.0dev3 (2018-07-05) \u00b6 remove default bidx in cli (#17) 1.0dev2 (2018-06-28) \u00b6 Add ZSTD compressed COG profile (#14) Fix warnings for useless boundless=True option (#13) add BIGTIFF=IF_SAFER to COG profile (if BIGTIFF not set otherwise in the env) Breaking Changes: * replace \"BAND\" by \"PIXEL\" interleave in PACKBITS profile (#16) 1.0dev1(2018-16-13) \u00b6 Initial release. Requires Rasterio >= 1.0b1.","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#next-tbd","text":"drop support for Python 3.5 ( cogeotiff/rio-cogeo#173 ) allow pathlib.PurePath object as input and output ( cogeotiff/rio-cogeo#173 ) add top-level exports ( cogeotiff/rio-cogeo#169 ) # before from rio_cogeo.cogeo import cog_translate , cog_validate , cog_info from rio_cogeo.profiles import cog_profiles # now from rio_cogeo import cog_translate , cog_validate , cog_info , cog_profiles","title":"Next (TBD)"},{"location":"release-notes/#210-2020-12-18","text":"switch to morecantile and update the web-optimized creation method to better match GDAL 3.2. add zoom_level_strategy options to match GDAL 3.2 COG driver. add aligned_levels (cli and api) to select the level of overview to align with the TMS grid. Breaking Changes: * removed --latitude-adjustment/--global-maxzoom option in the CLI * removed latitude_adjustment option in rio_cogeo.cogeo.cog_translate * updated overview blocksize to match the blocksize of the high resolution data (instead of default to 128) * for web-optimized COG, the highest overview level will be aligned with the TMS grid.","title":"2.1.0 (2020-12-18)"},{"location":"release-notes/#201-2020-10-07","text":"remove pkg_resources ( pypa/setuptools#510 )","title":"2.0.1 (2020-10-07)"},{"location":"release-notes/#200-2020-10-05","text":"There have been no changes since 2.0a9","title":"2.0.0 (2020-10-05)"},{"location":"release-notes/#20a9-2020-10-03","text":"Update max IFD offset to 300 bytes ( cogeotiff/rio-cogeo#158 )","title":"2.0a9 (2020-10-03)"},{"location":"release-notes/#20a8-2020-09-28","text":"Make sure Alpha band isn't considered as an internal mask by utils.has_mask_band (#156)","title":"2.0a8 (2020-09-28)"},{"location":"release-notes/#20a7post1-2020-09-23","text":"Fix wrong min-zoom calculation in rio_cogeo.cogeo.cog_info","title":"2.0a7.post1 (2020-09-23)"},{"location":"release-notes/#20a7-2020-09-23","text":"remove duplicate count information in rio_cogeo.cogeo.cog_info output (#150) allow COG with IFD offset up to 200 bytes to accomodate with GDAL 3.1 changes (#151) fix zoom level calculation in rio_cogeo.cogeo.cog_info","title":"2.0a7 (2020-09-23)"},{"location":"release-notes/#20a6-2020-08-18","text":"fix bug in cogeo.info when CRS in not set. add minzoom/maxzoom in cogeo.info output. Breaking Changes: * rio_cogeo.utils.get_max_zoom renamed rio_cogeo.utils.get_zooms and now return min/max zoom.","title":"2.0a6 (2020-08-18)"},{"location":"release-notes/#20a5-2020-07-31","text":"move most of the cogeo info code in rio_cogeo.cogeo.cog_info api add cog_validation info in cogeo info result cog_validate returns a tuple (is_valid, errors, warnings) (#142, co-author with @geospatial-jeff) add scale, offset, image tags and band color interpretation in cog_info (#145, #146 and #147)","title":"2.0a5 (2020-07-31)"},{"location":"release-notes/#20a4-2020-06-15","text":"Force output width and height (#140)","title":"2.0a4 (2020-06-15)"},{"location":"release-notes/#20a3-2020-06-15","text":"add info CLI (#134) use Deflate as default temporary compression (#137)","title":"2.0a3 (2020-06-15)"},{"location":"release-notes/#20a2-2020-05-20","text":"add --config CLI option to pass additional GDAL Configuration options (#135)","title":"2.0a2 (2020-05-20)"},{"location":"release-notes/#20a1-2020-05-07","text":"Dropping python 2 (#128) use new mercantile xy_bounds for better web-optimized file (#126) Allow temporary file on disk when using MemoryFile output add --blocksize option in CLI (#131) depreciate rio_cogeo.utils.get_maximum_overview_level and use rasterio.rio.overview.get_maximum_overview_level (#132)","title":"2.0a1 (2020-05-07)"},{"location":"release-notes/#1110-2020-02-21","text":"Transfer colormap (#121)","title":"1.1.10 (2020-02-21)"},{"location":"release-notes/#119-2020-02-06","text":"Transfer scale and offset values to output COG (#118)","title":"1.1.9 (2020-02-06)"},{"location":"release-notes/#118-2020-01-08","text":"Transfer color interpretation value to output COG (#113) * Thanks @pierotofy Cast dataset_mask returned by rasterio to uint8 to overcome a bug in rasterio 1.1.2 (#115)","title":"1.1.8 (2020-01-08)"},{"location":"release-notes/#117-2019-12-02","text":"add strict option to cog_validate to treat warnings as error (#109) * Thanks @pierotofy add documentation examples using MemoryFiles (#108 #107) Switch to PHOTOMETRIC=MINISBLACK when PHOTOMETRIC is set to YCBCR for 1 band dataset (#41)","title":"1.1.7 (2019-12-02)"},{"location":"release-notes/#116-2019-11-13","text":"add -forward-band-tags options (#115)","title":"1.1.6 (2019-11-13)"},{"location":"release-notes/#115-2019-10-04","text":"add --allow-intermediate-compression option to reduce the memory/disk footprint (#103)","title":"1.1.5 (2019-10-04)"},{"location":"release-notes/#114-2019-10-03","text":"Fix support for optimizing open datasets, memfiles, and VRTs (#100 from j08lue)","title":"1.1.4 (2019-10-03)"},{"location":"release-notes/#113-2019-09-16","text":"Add lzma/lerc/lerc_deflate/lerc_zstd profiles (#97) Add warnings and notes for non-standard compression (#97) fix THREADS definition for GDAL config","title":"1.1.3 (2019-09-16)"},{"location":"release-notes/#112-2019-09-12","text":"Fix incorrect context behavior closing input Dataset (#94)","title":"1.1.2 (2019-09-12)"},{"location":"release-notes/#111-2019-09-10","text":"add safeguard to keep datatype from input to output files (#85) CLI Changes: * add -t, --dtype datatype option. API Changes: * add datatype option * update for rasterio>=1.0.28 * allow rasterio.io.DatasetReader input (#89) Note: This release was deleted in PyPi.","title":"1.1.1 (2019-09-10)"},{"location":"release-notes/#110-2019-07-16","text":"check internal blocksize and adapt if raster is too small (#80)","title":"1.1.0 (2019-07-16)"},{"location":"release-notes/#100-2019-04-19","text":"add --web-optimized option to create a web optimized COG (#10) add --latitude-adjustment/--global-maxzoom option to adjust MAX_ZOOM for global datasets Web-optimized tests needs python3.6 (cogdumper) add --resampling option to select the resampling algorithm when using --web-optimized add --in-memory/--no-in-memory options to use temporyNamedd file instead of in-memory temp file.","title":"1.0.0 (2019-04-19)"},{"location":"release-notes/#10b3-2019-03-30","text":"Breaking Changes: remove deprecated YCBCR profile 512x512 dataset without internal tiling are valid","title":"1.0b3 (2019-03-30)"},{"location":"release-notes/#10b2-2019-03-27","text":"Breaking Changes: Switch from JPEG to DEFLATE as default profile in CLI (#66)","title":"1.0b2 (2019-03-27)"},{"location":"release-notes/#10b1-2019-03-25","text":"Breaking Changes: refactor utils.get_maximum_overview_level to get rasterio dataset as input and reduce the number of dataset opennings (#61)","title":"1.0b1 (2019-03-25)"},{"location":"release-notes/#10b0-2019-03-15","text":"add more logging and --quiet option (#46) add --overview-blocksize to set overview's internal tile size (#60) Bug fixes: copy tags and description from input to output (#19) copy input mask band to output mask Breaking Changes: rio cogeo now has subcommands: 'create' and 'validate' (#6). internal mask creation is now optional (--add-mask). internal nodata or alpha channel can be forwarded to the output dataset. removed default overview blocksize to be equal to the raw data blocksize (#60)","title":"1.0b0 (2019-03-15)"},{"location":"release-notes/#10dev10-2019-02-12","text":"allow non integer nodata value (#51) fix GDAL blocksize options casting for overview calculation (#50)","title":"1.0dev10 (2019-02-12)"},{"location":"release-notes/#10dev9-2019-02-11","text":"Renamed \"ycbcr\" profile's name to \"jpeg\" to reflect the compression name. \"ycbcr\" profile will raise a \"DeprecationWarning\" (#44) \"webp\" profile has been added to COG profiles. Exploitation of this new compression mode will require GDAL 2.4 (#27) Rio-cogeo can calculate the overview level based on the internal tile size and the dataset width/height (#37)","title":"1.0dev9 (2019-02-11)"},{"location":"release-notes/#10dev8-2018-10-02","text":"write tags in output file (#31) add bilinear, cubic spline, lanczos resampling modes for overviews","title":"1.0dev8 (2018-10-02)"},{"location":"release-notes/#10dev7-2018-09-12","text":"add resampling option for overviews (#28)","title":"1.0dev7 (2018-09-12)"},{"location":"release-notes/#10dev6-2018-08-23","text":"Remove unnecessary compression for in-memory step (reduce runtime and memory usage) (#25)","title":"1.0dev6 (2018-08-23)"},{"location":"release-notes/#10dev4-2018-07-16","text":"rasterio 1.0","title":"1.0dev4 (2018-07-16)"},{"location":"release-notes/#10dev3-2018-07-05","text":"remove default bidx in cli (#17)","title":"1.0dev3 (2018-07-05)"},{"location":"release-notes/#10dev2-2018-06-28","text":"Add ZSTD compressed COG profile (#14) Fix warnings for useless boundless=True option (#13) add BIGTIFF=IF_SAFER to COG profile (if BIGTIFF not set otherwise in the env) Breaking Changes: * replace \"BAND\" by \"PIXEL\" interleave in PACKBITS profile (#16)","title":"1.0dev2 (2018-06-28)"},{"location":"release-notes/#10dev12018-16-13","text":"Initial release. Requires Rasterio >= 1.0b1.","title":"1.0dev1(2018-16-13)"}]}